/api/inventory
GET
params:
{
	required_tags: String (CSV) [optional],
	excluded_tags: String (CSV) [optional],
	name: String [optional],
	model_number: String [optional],
	custom_fields: String (CSV) [optional], // Custom field names or custom field names with value
	page: String [optional], // needs per_page if included
	per_page: String [optional] // needs age if included
}
returns: // does not return instance objects
[{
    _id: String [unique],
    name: String [unique],
    quantity: Integer,
    model_number: String,
    description: String,
    tags: [String],
    has_instance_objects: Boolean,
    custom_fields: [
    {
        field: String,
	value: String // Mixed Type in MongoDB
    }]
}]
POST
params:
{
  name: String [required],
  quantity: Integer [required],
  model_number: String,
  description: String,
  tags: [String],
  custom_fields: [
    {
        field: String,
	value: String // Mixed Type in MongoDB
    }
  ]
}
return:
{
  _id: String [unique],
  name: String [unique],
  quantity: Integer,
  model_number: String,
  description: String,
  tags: [String],
  has_instance_objects: Boolean,
  custom_fields: [
    {
        field: String,
	value: String // Mixed Type in MongoDB
    }
  ]
}

/api/inventory/import
POST
body:
{
  name: String [required],
  quantity: Integer [required],
  model_number: String,
  description: String,
  tags: [String],
  custom_fields: [
    {
        name: String, // Name of Custom field, not ID
				value: String
  ]
}
or Array of body objects above.


/api/inventory/:item_id
GET
return:
{
  _id: String [unique],
  name: String [unique],
  quantity: Integer,
  model_number: String,
  description: String,
  tags: String array,
  has_instance_objects: Boolean,
  custom_fields:[
    {
        field: String,
	value: String // Mixed Type in MongoDB
    }
   ]
}

PUT
body:
{
	name: String [optional],
  quantity: Integer [optional],
	quantity_field: String // enum: "MANUAL", "LOSS", "ACQUISITION", "DESTRUCTION"
  model_number: String [optional],
  description: String [optional],
  tags: String array [optional],
  custom_fields:[
    {
        field: String,
	value: String // Mixed Type in MongoDB
    }
   ] [optional]
}
return:
{
  _id: String [unique],
  name: String [unique],
  quantity: Integer,
  model_number: String,
  description: String,
  tags: String array,
  has_instance_objects: Boolean,
  custom_fields:[
    {
        field: String,
	value: String // Mixed Type in MongoDB
    }
   ]
}

DELETE
return:
{
	"success"
}

/api/inventory/:item_id/customFields
POST
// Will update custom field if it already exists
body: {
	field: String (the id not the field name),
	value: Mixed
}
return: {
	// Item object from before
}

/api/inventory/:item_id/customFields/:field_id
PUT
// will add custom field if it doesn't exist
body: {
	value: Mixed
}
return: {
	// Item object from before
}
DELETE
// Won't return error if the field doesn't exist
return: {
	message: "Successful"
}

/api/inventory/:item_id/instances
GET
params:{
	serial_number: String [optional],
	condition: String [optional],
	status: String [optional]
}

return:
[
  {
  	_id: String,
    serial_number: String,
    condition: String,
    status: String,
  }
]
POST
body:
{
  serial_number: String,
  condition: String [optional],
  status: String [optional],
}
return:
{
  _id: String,
  serial_number: String,
  condition: String,
  status: String,
}

/api/inventory/:item_id/:instance_id
GET
return:
{
  _id: String,
  serial_number: String,
  condition: String,
  status: String,
}

PUT
body:
{
  serial_number: String [optional],
  condition: String [optional],
  status: String [optional],
}
return:
{
  _id: String,
  serial_number: String,
  condition: String,
  status: String,
}

DELETE
returns:
{
  "success"
}

/api/customFields
GET:
params:
{
	name: String [optional],
	type: String [optional],
	isPrivate: Boolean [optional]
}
return:
[
	{
		_id: String,
		name: String,
		type: String,
		isPrivate: Boolean
	}
]

POST:
body:
{
	name: String,
	type: String,
	isPrivate: Boolean
}
return:
{
	_id: String,
	name: String,
	type: String,
	isPrivate: Boolean
}

/api/customFields/:customFields_id
GET:
return: {
	_id: String,
	name: String,
	type: String,
	isPrivate: Boolean
}

PUT:
body:{
	name: String,
	type: String,
	isPrivate: Boolean
}
return: {
	_id: String,
	name: String,
	type: String,
	isPrivate: Boolean
}

DELETE: {
	"success"
}
/api/cart
GET
return:
{
	_id: String,
	user: String,
	items: [{
	  item: { // populated info
			_id: String,
			name: String,
			model_number: String,
			description: String
	  },
	  quantity: Integer
	}],
	description: String,
	created: String,
	lastModified, String
}

/api/cart/
PUT
body:
{
	user: String, // Admin only
	items: [{
		item: String,
		quantity: Integer
	}], // Admin only
	description: String
}

return:
{
	_id: String,
	user: String,
	items: [{
	   item:{ // populated info
			_id: String,
			name: String,
	       },
	   quantity: Integer
	}],
	description: String,
	created: String,
	lastModified, String
}

PATCH
body: {
	user: String // user id
	action: "CHECKOUT"
	reason: String
}
return {
	message: "Request successful"
	request: {
		// same request body as before
	}
}

/api/cart/items
POST
body:
{
	user: String, // admin-only
	item: String, // item id
	quantity: Integer
}
return:
{
	user: String,
	item: String,
	quantity: Integer
}

/api/cart/items/:item_id
PUT
body:
{
	user: String, // admin-only
	quantity: Integer
}
return:
{
	user: String,
	item: String,
	quantity: Integer
}

DELETE
return:
{
	"success"
}

/api/requests
GET
params:
{
	reviewer_comment: String [optional],
	requestor_comment: String [optional],
	reason: String [optional],
	status: String [optional],
	created: Date [optional],
	items: [String] [optional], // query with array of item names
	user: String [optional] // Only for admin users entering another username
}

return:
[
  {
    _id: String,
    user: {
		_id: String,
		username: String
	},
    items: [
		{
		id: String,
		name: String,
		quantity: Integer
		}
	],
    reason: String,
    created: String,
    status: String,
    requestor_comment: String,
    reviewer_comment: String
  }
]

POST
body:
{
  items: [
   {
     id: String,
     quantity: Integer
   }
  ],
  reason: String [optional],
  created: String [optional],
  status: String,
  requestor_comment: String [optional],
  reviewer_comment: String [optional]
}

return:
{
  _id: String,
  user_id: String,
  items: [
  {
	id: String,
	name: String,
	quantity: Integer
  }
  ],
  reason: String,
  time_stamp: String,
  status: String,
  comment: String
}

/api/requests/<id>
GET
return:
{
  _id: String,
  user_id: String,
  items: [
  {
	id: String,
	name: String,
	quantity: Integer
  }
  ],
  reason: String,
  created: String,
  status: String,
  comment: String
}

PUT
body:
{
  items: [
  {
	name: String,
	quantity: Integer
  }
  ],
  reason: String [optional],
  created: String [optional],
  status: String [optional],
  comment: String [optional]
}

return:
{
  _id: String,
  user_id: String,
  items: [
	  {
		id: String,
		name: String,
		quantity: Integer
	  }
  ],
  reason: String,
  created: String,
  status: String,
  comment: String
}

DELETE
return:
{
	"success"
}

PATCH
// if you use the action "DISBURSE" it will update the item quantity by subtracting
// the requested amount and then set the request status to "FULFILLED"
params: {
	action: "DISBURSE" // for now this is the only action
}
return {
	items: [
		{
			// same item body as before
		}
	],
	request: {
		// same request body as before
	}
}

/api/logs
GET
params:
{
	item_id: String,
	item_name: String,
	type: String, // ('ITEM_EDITED', 'ITEM_CREATED', 'ITEM_DELETED',
		'REQUEST_DISBURSED', 'REQUEST_CREATED', 'REQUEST_EDITED',
		'REQUEST_DELETED', 'FIELD_CREATED', 'FIELD_EDITED', 'FIELD_DELETED')
	user_id: String,
	start_date: String, // in full date format '2017-02-27T00:00:00-05:00' (encoded)
	end_date: String // in full date format '2017-02-27T00:00:00-05:00' (encoded)
}
return:
[
  {
    _id: String,
    initiating_user: {
			_id: String,
			username: String,
			netid: String,
			first_name: String,
			last_name: String
		},
		affected_user: {
			_id: String,
			username: String,
			netid: String,
			first_name: String,
			last_name: String
		},
		request: String,
		custom_field: {
			_id: String,
			name: String
		},
		items: [
			{
				_id: String,
				name: String,
			}
		],
  	type: String, // ('ITEM_EDITED', 'ITEM_CREATED', 'ITEM_DELETED',
      'REQUEST_DISBURSED', 'REQUEST_CREATED', 'REQUEST_EDITED',
      'REQUEST_DELETED', 'FIELD_CREATED', 'FIELD_EDITED', 'FIELD_DELETED')
    time_stamp: String,
		description: String
  }
]

/api/users
GET // Only admins can get
return {
	_id: String,
	username: String,
	role: String ('ADMIN', 'MANAGER', 'STANDARD'),
	email: String,
	subscribed: Boolean
}

POST
body: // Only admins can post
{
	username: String,
	password: String,
	role: String ('ADMIN', 'MANAGER', 'STANDARD'),
	email: String,
}
return {
	user: {
		_id: String,
		username: String,
		role: String ('ADMIN', 'MANAGER', 'STANDARD'),
		email: String,
	}
}

/api/user/:user_id
GET
return {
	_id: String,
	username: String,
	role: String ('ADMIN', 'MANAGER', 'STANDARD')
	email: String,
	subscribed: Boolean
}

PUT { // Anyone can edit themselves, only admins can edit others
body {
	first_name: String,
	last_name: String,
	role: String ('ADMIN', 'MANAGER', 'STANDARD'), // only admins can change this
	email: String,
	subscribed: Boolean // managers and above can change this
}
return {
	_id: String,
	username: String,
	role: String ('ADMIN', 'MANAGER', 'STANDARD'),
	email: String,
	subscribed: Boolean
}

}

/auth/login
POST
body:
{
	username: String,
	password: String
}

return {
	token: String,
	user: {
		username: String,
		password_hash: String,
		role: String ('ADMIN', 'MANAGER', 'STANDARD'),
		email: String,
		subscribed: Boolean
	}
}

/api/emailSettings
GET
params: none
return: {
	subject_tag: String,
	loan_emails: [{
		date: String,
		body: String
	}]
}
PUT
params: [{
	subject_tag: String
}]
return {
	// email settings object
}

/api/emailSettings/loans
POST
params: {
	date: String, // format 2017-02-24
	body: String
}
return: {
	date: String,
	body: String
}

/api/emailSettings/loans/:email_id
DELETE
params: none
return: {
	message: "Delete successful"
}
